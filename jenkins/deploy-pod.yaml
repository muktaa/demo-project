apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins-deployer
  namespace: last9-otel-demo
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins-deployer
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apps"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["networking.k8s.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["extensions"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins-deployer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins-deployer
subjects:
- kind: ServiceAccount
  name: jenkins-deployer
  namespace: last9-otel-demo
---
apiVersion: v1
kind: Pod
metadata:
  name: microservices-deployer
  namespace: last9-otel-demo
  labels:
    app: microservices-deployer
spec:
  serviceAccountName: jenkins-deployer
  containers:
  - name: deployer
    image: alpine/k8s:1.24.16
    command: ["/bin/sh"]
    args: ["-c", "while true; do sleep 30; done;"]
    env:
    - name: AWS_REGION
      value: "ap-south-1"
    - name: EKS_CLUSTER_NAME
      value: "last9-demo"
    - name: KUBE_NAMESPACE
      value: "last9-otel-demo"
    - name: DOCKER_REGISTRY
      value: "docker.io/last9mukta"
    - name: LAST9_AUTH_HEADER
      valueFrom:
        secretKeyRef:
          name: otel-secret
          key: last9-auth-header
    volumeMounts:
    - name: aws-credentials
      mountPath: /root/.aws
      readOnly: true
  volumes:
  - name: aws-credentials
    secret:
      secretName: aws-credentials
  restartPolicy: Always
---
# Script to deploy from the pod
apiVersion: v1
kind: ConfigMap
metadata:
  name: deploy-script
  namespace: last9-otel-demo
data:
  deploy.sh: |
    #!/bin/bash
    set -e
    
    echo "Cloning repository..."
    git clone https://github.com/muktaa/demo-project.git /tmp/demo-project
    cd /tmp/demo-project
    
    echo "Configuring kubectl..."
    aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
    
    echo "Creating namespace..."
    kubectl apply -f k8s/jenkins/namespace.yaml
    
    echo "Deploying PostgreSQL ..."
    kubectl apply -f k8s/jenkins/postgres-init.yaml
    kubectl apply -f k8s/jenkins/postgres.yaml
    
    echo "Waiting for PostgreSQL to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/postgres -n last9-otel-demo
    
    echo "Updating image references..."
    # Replace with your actual registry
    sed -i 's|your-registry|docker.io/last9mukta|g' k8s/jenkins/*.yaml
    
    echo "Deploying OTLP credentials..."
    # Create base64 encoded values for secrets
    # export OTEL_HEADERS_BASE64=$(echo -n "$OTEL_HEADERS" | base64)
    
    # Replace placeholders in the template
    envsubst < k8s/jenkins/otel-secret-jenkins.yaml > k8s/jenkins/otel-secret.yaml
    kubectl apply -f k8s/jenkins/otel-secret.yaml
    
    echo "Deploying microservices..."
    kubectl apply -f k8s/jenkins/user-service.yaml
    kubectl apply -f k8s/jenkins/order-service.yaml
    kubectl apply -f k8s/jenkins/notification-service.yaml
    
    echo "Deploying UI..."
    kubectl apply -f microservices-ui/k8s/deployment.yaml
    
    echo "Deploying ingress..."
    kubectl apply -f k8s/jenkins/ingress.yaml
    
    echo "Waiting for services to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/user-service -n last9-otel-demo
    kubectl wait --for=condition=available --timeout=300s deployment/order-service -n last9-otel-demo
    kubectl wait --for=condition=available --timeout=300s deployment/notification-service -n last9-otel-demo
    kubectl wait --for=condition=available --timeout=300s deployment/microservices-ui -n last9-otel-demo
    
    echo "Deployment completed! Checking status..."
    kubectl get pods -n last9-otel-demo
    kubectl get services -n last9-otel-demo
    
    